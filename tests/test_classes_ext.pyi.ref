from typing import Optional
from typing import overload

class A:
    def __init__(self, arg: int, /) -> None: ...

class Animal:
    def __init__(self) -> None:
        """A constructor"""

    def name(self) -> str:
        """A method"""

    def what(self) -> str: ...

class B:
    def __init__(self, arg: int, /) -> None: ...

class B2:
    def __init__(self, arg: int, /) -> None: ...

class Base:
    pass

class Big:
    """
    A class
    with a multi-line
    docstring..
    """
    def __init__(self) -> None: ...

class BigAligned:
    def __init__(self) -> None: ...

class C:
    def __init__(self, arg: int, /) -> None: ...

class Cat:
    def __init__(self, arg: str, /) -> None: ...

class ClassWithLen:
    def __init__(self) -> None: ...

    def __len__(self, /):
        """Return len(self)."""

class ClassWithSupplement:
    def __init__(self) -> None: ...

class D:
    @overload
    def __init__(self, arg: test_classes_ext.A, /) -> None: ...

    @overload
    def __init__(self, arg: test_classes_ext.B, /) -> None: ...

    @overload
    def __init__(self, arg: int, /) -> None: ...

    @overload
    def __init__(self, arg: float, /) -> None: ...

    @property
    def value(self) -> int: ...

    @value.setter
    def value(self, arg: int, /) -> None: ...

class Dog:
    def __init__(self, arg: str, /) -> None: ...

class FinalType:
    def __init__(self) -> None: ...

class Foo:
    pass

class IncrementingStruct:
    def __init__(self, arg: test_classes_ext.Struct, /) -> None: ...

class Int:
    def __init__(self, arg: int, /) -> None: ...

    def __add__(self, arg: test_classes_ext.Int, /) -> test_classes_ext.Int: ...

    def __iadd__(self, arg: test_classes_ext.Int, /) -> test_classes_ext.Int: ...

    def __sub__(self, arg: float, /) -> test_classes_ext.Int: ...

    def __repr__(self) -> str: ...

class MyClass:
    def __init__(self) -> None: ...

    class NestedClass:
        def f(self) -> None: ...

    def f(self) -> None: ...

class NonCopyableVec:
    pass

class PairStruct:
    def __init__(self) -> None: ...

    @property
    def s1(self) -> test_classes_ext.Struct:
        """A documented property"""

    @s1.setter
    def s1(self, arg: test_classes_ext.Struct, /) -> None: ...

    @property
    def s2(self) -> test_classes_ext.Struct: ...

    @s2.setter
    def s2(self, arg: test_classes_ext.Struct, /) -> None: ...

class PolymorphicBase:
    pass

class PolymorphicSubclass:
    pass

class StaticProperties:
    value: int = ...
    """Static property docstring"""

    @staticmethod
    def get() -> int: ...

class StaticProperties2:
    pass

class Struct:
    """Some documentation"""
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, arg: int, /) -> None: ...

    def value(self) -> int: ...

    def set_value(self, value: int) -> None: ...

    def self(self) -> test_classes_ext.Struct: ...

    def none(self) -> test_classes_ext.Struct: ...

    def __getstate__(self) -> int: ...

    def __setstate__(self, arg: int, /) -> None: ...

    @overload
    @staticmethod
    def static_test(arg: int, /) -> int: ...

    @overload
    @staticmethod
    def static_test(arg: float, /) -> int: ...

    @staticmethod
    def create_move() -> test_classes_ext.Struct: ...

    @staticmethod
    def create_reference() -> test_classes_ext.Struct: ...

    @staticmethod
    def create_copy() -> test_classes_ext.Struct: ...

    @staticmethod
    def create_take() -> test_classes_ext.Struct: ...

class StructWithAttr:
    def __init__(self, arg: int, /) -> None: ...

class Subclass:
    pass

class Wrapper:
    def __init__(self) -> None: ...

    @property
    def value(self) -> test_classes_ext.Wrapper: ...

    @value.setter
    def value(self, arg: test_classes_ext.Wrapper, /) -> None: ...

def animal_passthrough(arg: test_classes_ext.Animal, /) -> test_classes_ext.Animal: ...

def call_function(arg: object, /) -> object: ...

def call_method(arg: object, /) -> object: ...

def check_shared(arg: "Shared", /) -> None: ...

def check_supplement(arg: object, /) -> bool: ...

def dog_passthrough(arg: test_classes_ext.Dog, /) -> test_classes_ext.Dog: ...

def f() -> None: ...

def factory() -> test_classes_ext.Base: ...

def factory_2() -> test_classes_ext.Base: ...

def get_d(arg: test_classes_ext.D, /) -> int: ...

def get_destructed() -> list: ...

def get_incrementing_struct_value(arg: test_classes_ext.IncrementingStruct, /) -> test_classes_ext.Struct: ...

def go(arg: test_classes_ext.Animal, /) -> str: ...

def i2p(arg: int, /) -> test_classes_ext.Foo: ...

def is_int_1(arg: object, /) -> bool: ...

def is_int_2(arg: object, /) -> bool: ...

def is_struct(arg: object, /) -> bool: ...

def keep_alive_arg(arg0: object, arg1: object, /) -> object: ...

def keep_alive_ret(arg0: object, arg1: object, /) -> object: ...

def none_0(arg: test_classes_ext.Struct, /) -> bool: ...

def none_1(arg: test_classes_ext.Struct) -> bool: ...

def none_2(arg: test_classes_ext.Struct) -> bool: ...

def none_3(arg: Optional[test_classes_ext.Struct]) -> bool: ...

def none_4(arg: Optional[test_classes_ext.Struct]) -> bool: ...

def p2i(arg: test_classes_ext.Foo, /) -> int: ...

def polymorphic_factory() -> test_classes_ext.PolymorphicBase: ...

def polymorphic_factory_2() -> test_classes_ext.PolymorphicBase: ...

def reset() -> None: ...

def stats() -> dict: ...

def test_handle_t(arg: test_classes_ext.Struct, /) -> object: ...

def test_lowlevel() -> tuple: ...

def test_slots() -> tuple: ...

def test_type_object_t(arg: type[test_classes_ext.Struct], /) -> object: ...

def try_cast_1(arg: Optional[object]) -> tuple[bool, test_classes_ext.Struct]: ...

def try_cast_2(arg: Optional[object]) -> tuple[bool, test_classes_ext.Struct]: ...

def try_cast_3(arg: Optional[object]) -> tuple[bool, test_classes_ext.Struct]: ...

def try_cast_4(arg: object, /) -> tuple[bool, int]: ...

def void_ret(arg: test_classes_ext.Animal, /) -> None: ...

del overload
del Optional