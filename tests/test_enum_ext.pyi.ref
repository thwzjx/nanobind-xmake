from typing import TypeVar, overload

_EnumT = TypeVar('_EnumT', bound='_Enum')

class _Enum:
    def __init__(self: _EnumT, arg: _EnumT, /) -> None: ...
    def __repr__(self, /) -> str: ...
    def __hash__(self, /) -> int: ...
    def __int__(self, /) -> int: ...
    def __index__(self, /) -> int: ...
    def __eq__(self, arg: object, /) -> bool: ...
    def __ne__(self, arg: object, /) -> bool: ...
    def __gt__(self: _EnumT, arg: _EnumT | int, /) -> bool: ...
    def __ge__(self: _EnumT, arg: _EnumT | int, /) -> bool: ...
    def __lt__(self: _EnumT, arg: _EnumT | int, /) -> bool: ...
    def __le__(self: _EnumT, arg: _EnumT | int, /) -> bool: ...

class _EnumArith(_Enum):
    def __abs__(self: _EnumT) -> _EnumT: ...
    def __neg__(self: _EnumT) -> _EnumT: ...
    def __invert__(self: _EnumT) -> _EnumT: ...
    def __add__(self: _EnumT, arg: _EnumT | int, /) -> _EnumT: ...
    def __radd__(self: _EnumT, arg: _EnumT | int, /) -> _EnumT: ...
    def __sub__(self: _EnumT, arg: _EnumT | int, /) -> _EnumT: ...
    def __rsub__(self: _EnumT, arg: _EnumT | int, /) -> _EnumT: ...
    def __mul__(self: _EnumT, arg: _EnumT | int, /) -> _EnumT: ...
    def __rmul__(self: _EnumT, arg: _EnumT | int, /) -> _EnumT: ...
    def __floordiv__(self: _EnumT, arg: _EnumT | int, /) -> _EnumT: ...
    def __rfloordiv__(self: _EnumT, arg: _EnumT | int, /) -> _EnumT: ...
    def __lshift__(self: _EnumT, arg: _EnumT | int, /) -> _EnumT: ...
    def __rlshift__(self: _EnumT, arg: _EnumT | int, /) -> _EnumT: ...
    def __rshift__(self: _EnumT, arg: _EnumT | int, /) -> _EnumT: ...
    def __rrshift__(self: _EnumT, arg: _EnumT | int, /) -> _EnumT: ...
    def __and__(self: _EnumT, arg: _EnumT | int, /) -> _EnumT: ...
    def __rand__(self: _EnumT, arg: _EnumT | int, /) -> _EnumT: ...
    def __or__(self: _EnumT, arg: _EnumT | int, /) -> _EnumT: ...
    def __ror__(self: _EnumT, arg: _EnumT | int, /) -> _EnumT: ...
    def __xor__(self: _EnumT, arg: _EnumT | int, /) -> _EnumT: ...
    def __rxor__(self: _EnumT, arg: _EnumT | int, /) -> _EnumT: ...

class ClassicEnum(_Enum):
    Item1: ClassicEnum

    Item2: ClassicEnum

class Color(_EnumArith):
    Black: Color

    Red: Color

    Green: Color

    Blue: Color

    Cyan: Color

    Yellow: Color

    Magenta: Color

    White: Color

class Enum(_Enum):
    """enum-level docstring"""

    A: Enum
    """Value A"""

    B: Enum
    """Value B"""

    C: Enum
    """Value C"""

    def dummy(self, arg: Enum = Enum.A) -> None: ...

class EnumProperty:
    def __init__(self) -> None: ...

    @property
    def read_enum(self) -> Enum: ...

Item1: ClassicEnum = ClassicEnum.Item1

Item2: ClassicEnum = ClassicEnum.Item2

class SEnum(_EnumArith):
    A: SEnum

    B: SEnum

    C: SEnum

@overload
def from_enum(arg: Enum, /) -> int: ...

@overload
def from_enum(arg: SEnum, /) -> int: ...

def to_enum(arg: int, /) -> Enum: ...
